import Head from "next/head";
import { useState, useEffect, useRef, FormEvent, useContext } from "react";
import { IoMdPhotos } from "react-icons/io";
import { SiRedis } from "react-icons/si";
import { StateContext } from "../Context";
import ImageCard from "../components/ImageCard";

import { UidUrls, UrlSizes } from "../Types";

export default function Home() {
  const { savedImages, savedImagesArray, urls, setUrls } =
    useContext(StateContext);

  const searchRef = useRef<HTMLInputElement>(null);

  const fetchUrls = async (query: string) => {
    const options = {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(query),
    };
    const res = await fetch(`${window.location.pathname}api/unsplash`, options);
    if (res.status === 200) {
      const urlsObject = (await res.json()) as UidUrls;
      return { urlsObject };
    } else {
      const { message } = (await res.json()) as { message: string };
      return { message };
    }
  };

  const onSubmit = async (e: FormEvent) => {
    e.preventDefault();

    const query = searchRef.current?.value;
    if (typeof query !== "string") return;

    const { urlsObject, message } = await fetchUrls(query);
    if (urlsObject) setUrls(urlsObject);
    if (message) window.alert(message);
  };

  useEffect(() => {}, [urls]);

  return (
    <>
      <Head>
        <title>Photo Sort</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="form-container">
          <form onSubmit={onSubmit}>
            <input
              ref={searchRef}
              type="text"
              placeholder="Search Unsplash Photos"
              maxLength={12}
              required
              className="els"
            />
            <button type="submit" className="els">
              Search
            </button>
          </form>

          <div className="saved-container">
            <IoMdPhotos size={"4rem"} color={"hsl(220, 75%, 50%)"} />
            <p>{savedImagesArray?.length || 0}</p>
          </div>
          <div className="saved-container">
            <SiRedis size={"4rem"} color={"hsl(20, 75%, 50%)"} />
            <p>{savedImagesArray?.length || 0}</p>
          </div>
        </div>

        <h1>Select photos to save</h1>
        <p> current search ( {searchRef.current?.value} )</p>
        <div className="images">
          {Object.entries(urls)?.map(
            ([uid, { thumb, full }]: [string, UrlSizes], i) => {
              const initSaveValue = savedImages[uid] ? true : false;
              return (
                <ImageCard
                  key={i}
                  urls={{ thumb, full }}
                  uid={uid}
                  isSaved={initSaveValue}
                />
              );
            }
          )}
        </div>

        {/* {savedImagesArray?.length && (
          <div className="saved-modal">
            <div className="images">
              {savedImagesArray?.map((urls: sizes, i: number) => (
                <ImageCard key={i} index={i} urls={urls} />
              ))}
            </div>
          </div>
        )} */}
      </main>
    </>
  );
}

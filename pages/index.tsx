import Head from "next/head";
import Image from "next/image";
import { useState, useEffect, useRef, FormEvent, useContext } from "react";
import { Urls, sizes } from "../Types";
import { IoMdPhotos } from "react-icons/io";

import { StateContext } from "../Context";
import ImageCard from "../components/ImageCard";

type UnsplashRes = {
  urls: Urls;
  message: string;
};

export default function Home() {
  const { savedImages } = useContext(StateContext);
  const savedImagesArray = savedImages ? Object.values(savedImages) : null;

  const [urls, setUrls] = useState<Urls>();

  const searchRef = useRef<HTMLInputElement>(null);

  const fetchUrls = async (query: string) => {
    const options = {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(query),
    };
    const res = await fetch(`${window.location.pathname}api/unsplash`, options);
    if (res.status === 200) {
      const urls = (await res.json()) as Urls;
      return urls;
    } else {
      const { message } = (await res.json()) as UnsplashRes;
      return window.alert(message);
    }
  };

  const onSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (typeof searchRef.current?.value !== "string") return;
    const unsplashUrls = await fetchUrls(searchRef.current.value!);
    if (typeof unsplashUrls === "object") {
      setUrls(unsplashUrls);
    }
  };

  useEffect(() => {
    console.log(savedImages);
  }, [urls]);

  return (
    <>
      <Head>
        <title>Photo Sort</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="form-container">
          <form onSubmit={onSubmit}>
            <input
              ref={searchRef}
              type="text"
              placeholder="Search Unsplash Photos"
              maxLength={12}
              required
              className="els"
            />
            <button type="submit" className="els">
              Search
            </button>
          </form>

          <div className="saved-container">
            <IoMdPhotos
              size={"4rem"}
              color={"hsl(220, 75%, 50%)"}
              className="saved-icon"
            />
            <p className="saved-amount">{savedImagesArray?.length || 0}</p>
          </div>
        </div>

        {urls?.length && (
          <>
            <h1>Select photos to save</h1>
            <p> current search ( {searchRef.current?.value} )</p>
            <div className="images">
              {urls?.map(({ thumb, full }: sizes, i: number) => {
                console.log(thumb, full);
                return <ImageCard key={i} url={thumb} value={full} />;
              })}
            </div>
          </>
        )}

        {savedImagesArray?.length && (
          <div className="saved-modal">
            <div className="images">
              {savedImagesArray?.map(({ thumb, full }: sizes, i: number) => (
                <ImageCard key={i} url={thumb} value={full} />
              ))}
            </div>
          </div>
        )}
      </main>
    </>
  );
}
